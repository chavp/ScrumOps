@page "/teams/create"
@page "/teams/{TeamId:int}/edit"
@using System.ComponentModel.DataAnnotations
@using ScrumOps.Shared.Contracts.Teams
@using ScrumOps.Web.Services
@inject ITeamService TeamService
@inject NavigationManager Navigation
@inject ILogger<TeamFormComponent> Logger

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4 class="mb-0">@(IsEditMode ? "Edit Team" : "Create New Team")</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="formModel" OnValidSubmit="HandleSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="mb-3">
                            <label for="teamName" class="form-label">Team Name *</label>
                            <InputText id="teamName" class="form-control" @bind-Value="formModel.Name" placeholder="Enter team name" />
                            <ValidationMessage For="@(() => formModel.Name)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="teamDescription" class="form-label">Description</label>
                            <InputTextArea id="teamDescription" class="form-control" rows="3" @bind-Value="formModel.Description" placeholder="Enter team description" />
                            <ValidationMessage For="@(() => formModel.Description)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="sprintLength" class="form-label">Sprint Length (weeks) *</label>
                            <InputNumber id="sprintLength" class="form-control" @bind-Value="formModel.SprintLengthWeeks" min="1" max="4" />
                            <ValidationMessage For="@(() => formModel.SprintLengthWeeks)" class="text-danger" />
                            <div class="form-text">Choose between 1-4 weeks for optimal Scrum practices</div>
                        </div>

                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                <i class="bi bi-x-circle"></i> Cancel
                            </button>
                            <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                @if (isSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                <i class="bi bi-@(IsEditMode ? "check-circle" : "plus-circle")"></i>
                                @(IsEditMode ? "Update Team" : "Create Team")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int? TeamId { get; set; }

    private TeamFormModel formModel = new();
    private bool isSubmitting = false;
    private bool IsEditMode => TeamId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode && TeamId.HasValue)
        {
            await LoadTeam();
        }
    }

    private async Task LoadTeam()
    {
        try
        {
            var team = await TeamService.GetTeamAsync(TeamId!.Value);
            formModel = new TeamFormModel
            {
                Name = team.Name,
                Description = team.Description,
                SprintLengthWeeks = team.SprintLengthWeeks
            };
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load team {TeamId}", TeamId);
            Navigation.NavigateTo("/teams");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;

            if (IsEditMode && TeamId.HasValue)
            {
                var updateRequest = new UpdateTeamRequest
                {
                    Name = formModel.Name,
                    Description = formModel.Description,
                    SprintLengthWeeks = formModel.SprintLengthWeeks
                };

                await TeamService.UpdateTeamAsync(TeamId.Value, updateRequest);
                Navigation.NavigateTo($"/teams/{TeamId.Value}");
            }
            else
            {
                var createRequest = new CreateTeamRequest
                {
                    Name = formModel.Name,
                    Description = formModel.Description ?? "",
                    SprintLengthWeeks = formModel.SprintLengthWeeks
                };

                var result = await TeamService.CreateTeamAsync(createRequest);
                Navigation.NavigateTo($"/teams/{result.Id}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to {Action} team", IsEditMode ? "update" : "create");
            // Could show a toast notification here
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        if (IsEditMode && TeamId.HasValue)
        {
            Navigation.NavigateTo($"/teams/{TeamId.Value}");
        }
        else
        {
            Navigation.NavigateTo("/teams");
        }
    }

    public class TeamFormModel
    {
        [Required]
        [StringLength(50, MinimumLength = 3)]
        public string Name { get; set; } = string.Empty;

        [StringLength(500)]
        public string? Description { get; set; }

        [Range(1, 4)]
        public int SprintLengthWeeks { get; set; } = 2;
    }
}