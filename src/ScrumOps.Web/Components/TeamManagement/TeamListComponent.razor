@using ScrumOps.Shared.Contracts.Teams
@using ScrumOps.Web.Services
@inject ITeamService TeamService
@inject NavigationManager Navigation
@inject ILogger<TeamListComponent> Logger

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>Teams</h2>
        </div>
        <div class="col-auto">
            <button class="btn btn-primary" @onclick="NavigateToCreate">
                <i class="bi bi-plus-circle"></i> Create Team
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (teams?.Any() == true)
    {
        <div class="row">
            @foreach (var team in teams)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@team.Name</h5>
                            <p class="card-text">@team.Description</p>
                            <div class="row text-muted small">
                                <div class="col">
                                    <i class="bi bi-people"></i> @team.MemberCount members
                                </div>
                                <div class="col">
                                    <i class="bi bi-clock"></i> @team.SprintLengthWeeks weeks
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col">
                                    <small class="text-muted">Velocity: @team.Velocity.ToString("F1")</small>
                                </div>
                                <div class="col text-end">
                                    <span class="badge @(team.IsActive ? "bg-success" : "bg-secondary")">
                                        @(team.IsActive ? "Active" : "Inactive")
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="btn-group w-100" role="group">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => NavigateToDetails(team.Id)">
                                    <i class="bi bi-eye"></i> View
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => NavigateToEdit(team.Id)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <h4>No teams found</h4>
            <p class="text-muted">Get started by creating your first Scrum team.</p>
            <button class="btn btn-primary" @onclick="NavigateToCreate">
                <i class="bi bi-plus-circle"></i> Create First Team
            </button>
        </div>
    }
</div>

@code {
    private IEnumerable<TeamSummary>? teams;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTeams();
    }

    private async Task LoadTeams()
    {
        try
        {
            isLoading = true;
            var response = await TeamService.GetTeamsAsync();
            teams = response.Teams;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load teams");
            // Could show a toast notification here
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/teams/create");
    }

    private void NavigateToDetails(int teamId)
    {
        Navigation.NavigateTo($"/teams/{teamId}");
    }

    private void NavigateToEdit(int teamId)
    {
        Navigation.NavigateTo($"/teams/{teamId}/edit");
    }
}