@using ScrumOps.Web.Services
@inject INotificationService NotificationService
@implements IDisposable
@rendermode InteractiveServer

<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 9999;">
    @foreach (var notification in notifications)
    {
        <div class="toast show" role="alert">
            <div class="toast-header bg-@GetBackgroundColor(notification.Type) text-white">
                <i class="bi bi-@GetIcon(notification.Type) me-2"></i>
                <strong class="me-auto">@notification.Title</strong>
                <small>@notification.Timestamp.ToString("HH:mm")</small>
                <button type="button" class="btn-close btn-close-white" @onclick="@(() => RemoveNotification(notification.Id))" @onclick:preventDefault="true"></button>
            </div>
            <div class="toast-body">
                @notification.Message
            </div>
        </div>
    }
</div>

@code {
    private List<NotificationMessage> notifications = new();
    private Timer? cleanupTimer;

    protected override void OnInitialized()
    {
        NotificationService.OnNotification += OnNotificationReceived;
        cleanupTimer = new Timer(CleanupOldNotifications, null, TimeSpan.Zero, TimeSpan.FromSeconds(30));
    }

    private void OnNotificationReceived(NotificationMessage notification)
    {
        notifications.Add(notification);
        InvokeAsync(StateHasChanged);
        
        // Auto-remove after 5 seconds
        _ = Task.Delay(5000).ContinueWith(_ => RemoveNotification(notification.Id));
    }

    private void RemoveNotification(Guid id)
    {
        var notification = notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            notifications.Remove(notification);
            InvokeAsync(StateHasChanged);
        }
    }

    private void CleanupOldNotifications(object? state)
    {
        var cutoff = DateTime.Now.AddMinutes(-5);
        var oldNotifications = notifications.Where(n => n.Timestamp < cutoff).ToList();
        
        if (oldNotifications.Any())
        {
            foreach (var notification in oldNotifications)
            {
                notifications.Remove(notification);
            }
            InvokeAsync(StateHasChanged);
        }
    }

    private string GetBackgroundColor(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "success",
            NotificationType.Error => "danger",
            NotificationType.Warning => "warning",
            NotificationType.Info => "info",
            _ => "secondary"
        };
    }

    private string GetIcon(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "check-circle",
            NotificationType.Error => "exclamation-triangle",
            NotificationType.Warning => "exclamation-circle",
            NotificationType.Info => "info-circle",
            _ => "bell"
        };
    }

    public void Dispose()
    {
        NotificationService.OnNotification -= OnNotificationReceived;
        cleanupTimer?.Dispose();
    }
}