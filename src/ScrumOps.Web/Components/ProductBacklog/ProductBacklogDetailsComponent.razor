@page "/backlog/{TeamId:guid}"
@using ScrumOps.Shared.Contracts.ProductBacklog
@using ScrumOps.Web.Services
@using ScrumOps.Web.Components.ProductBacklog
@inject IProductBacklogService ProductBacklogService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject ILogger<ProductBacklogDetailsComponent> Logger
@rendermode InteractiveServer

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (backlog != null)
    {
        <div class="row mb-3">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/backlog">Product Backlogs</a></li>
                        <li class="breadcrumb-item active">@backlog.TeamName</li>
                    </ol>
                </nav>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1>@backlog.TeamName Product Backlog</h1>
                        <p class="text-muted">Manage your product requirements and user stories</p>
                    </div>
                    <div>
                        <button type="button" class="btn btn-primary" @onclick="NavigateToAddItem" @onclick:preventDefault="true">
                            <i class="bi bi-plus-circle"></i> Add Item
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Total Items</h5>
                        <h2 class="text-primary">@backlog.TotalItems</h2>
                        <small class="text-muted">backlog items</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Done</h5>
                        <h2 class="text-success">@completedItems</h2>
                        <small class="text-muted">completed</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">In Progress</h5>
                        <h2 class="text-warning">@inProgressItems</h2>
                        <small class="text-muted">active</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Story Points</h5>
                        <h2 class="text-info">@totalStoryPoints</h2>
                        <small class="text-muted">estimated</small>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Backlog Items</h5>
                            <div class="btn-group btn-group-sm" role="group">
                                <input type="radio" class="btn-check" name="viewOptions" id="kanban" @onchange="@(() => SetView("kanban"))">
                                <label class="btn btn-outline-primary" for="kanban">
                                    <i class="bi bi-kanban"></i> Kanban
                                </label>

                                <input type="radio" class="btn-check" name="viewOptions" id="list" checked @onchange="@(() => SetView("list"))">
                                <label class="btn btn-outline-primary" for="list">
                                    <i class="bi bi-list-ul"></i> List
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (currentView == "kanban")
                        {
                            <div class="row">
                                @foreach (var status in new[] { "To Do", "In Progress", "Review", "Done" })
                                {
                                    <div class="col-md-3">
                                        <div class="card mb-3">
                                            <div class="card-header bg-@GetStatusColor(status) text-white">
                                                <h6 class="mb-0">@status (@GetItemsByStatus(status).Count())</h6>
                                            </div>
                                            <div class="card-body p-2" style="min-height: 400px;">
                                                @foreach (var item in GetItemsByStatus(status).OrderBy(i => i.Priority))
                                                {
                                                    <div class="card mb-2 @GetItemCardClass(item)">
                                                        <div class="card-body p-2">
                                                            <h6 class="card-title mb-1">@item.Title</h6>
                                                            <p class="card-text small text-muted">@GetTruncatedDescription(item.Description)</p>
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <div>
                                                                    <span class="badge bg-@GetTypeBadgeColor(item.Type)">@item.Type</span>
                                                                    @if (item.StoryPoints.HasValue)
                                                                    {
                                                                        <span class="badge bg-secondary">@item.StoryPoints SP</span>
                                                                    }
                                                                </div>
                                                                <div class="btn-group btn-group-sm">
                                                                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => NavigateToEditItem(item.Id.Value))" @onclick:preventDefault="true" title="Edit">
                                                                        <i class="bi bi-pencil"></i>
                                                                    </button>
																	<button type="button" class="btn btn-outline-danger btn-sm" @onclick="@(() => DeleteItem(item.Id.Value))" @onclick:preventDefault="true" title="Delete">
                                                                        <i class="bi bi-trash"></i>
                                                                    </button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            @if (backlog.Items.Any())
                            {
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Priority</th>
                                                <th>Title</th>
                                                <th>Type</th>
                                                <th>Status</th>
                                                <th>Story Points</th>
                                                <th>Created</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in backlog.Items.OrderBy(i => i.Priority))
                                            {
                                                <tr>
                                                    <td>
                                                        <span class="badge bg-@GetPriorityColor(item.Priority)">@item.Priority</span>
                                                    </td>
                                                    <td>
                                                        <div>
                                                            <strong>@item.Title</strong>
                                                            <br />
                                                            <small class="text-muted">@GetTruncatedDescription(item.Description)</small>
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-@GetTypeBadgeColor(item.Type)">@item.Type</span>
                                                    </td>
                                                    <td>
                                                        <span class="badge bg-@GetStatusColor(item.Status)">@item.Status</span>
                                                    </td>
                                                    <td>
                                                        @if (item.StoryPoints.HasValue)
                                                        {
                                                            <span class="badge bg-secondary">@item.StoryPoints</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">Not estimated</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        <small class="text-muted">@item.CreatedDate.ToString("MMM dd, yyyy")</small>
                                                    </td>
                                                    <td>
                                                        <div class="btn-group btn-group-sm">
                                                            <button type="button" class="btn btn-outline-primary" @onclick="@(() => NavigateToEditItem(item.Id.Value))" @onclick:preventDefault="true" title="Edit">
                                                                <i class="bi bi-pencil"></i>
                                                            </button>
															<button type="button" class="btn btn-outline-danger" @onclick="@(() => DeleteItem(item.Id.Value))" @onclick:preventDefault="true" title="Delete">
                                                                <i class="bi bi-trash"></i>
                                                            </button>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            }
                            else
                            {
                                <div class="text-center py-5">
                                    <i class="bi bi-list-check display-4 text-muted"></i>
                                    <h5 class="mt-3">No backlog items</h5>
                                    <p class="text-muted">Start by adding your first user story or requirement.</p>
                                    <button type="button" class="btn btn-primary" @onclick="NavigateToAddItem" @onclick:preventDefault="true">
                                        <i class="bi bi-plus-circle"></i> Add First Item
                                    </button>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="mb-3">
                <i class="bi bi-list-check display-1 text-muted"></i>
            </div>
            <h4>No product backlog found</h4>
            <p class="text-muted mb-4">This team doesn't have a product backlog yet. Create one to start managing requirements and user stories.</p>
            <div class="d-flex gap-2 justify-content-center">
                <button type="button" class="btn btn-primary" @onclick="NavigateToCreateBacklog" @onclick:preventDefault="true">
                    <i class="bi bi-plus-circle"></i> Create Product Backlog
                </button>
                <button type="button" class="btn btn-secondary" @onclick="NavigateToBacklogs" @onclick:preventDefault="true">
                    <i class="bi bi-arrow-left"></i> Back to Backlogs
                </button>
            </div>
        </div>
    }
</div>

@code {
	[Parameter] public Guid TeamId { get; set; }

    private ProductBacklogResponse? backlog;
    private bool isLoading = true;
    private string currentView = "list";
    private int completedItems => backlog?.Items.Count(i => i.Status == "Done") ?? 0;
    private int inProgressItems => backlog?.Items.Count(i => i.Status == "In Progress") ?? 0;
    private int totalStoryPoints => backlog?.Items.Where(i => i.StoryPoints.HasValue).Sum(i => i.StoryPoints.Value) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadBacklog();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadBacklog();
    }

    private async Task LoadBacklog()
    {
        try
        {
            isLoading = true;
			backlog = await ProductBacklogService.GetProductBacklogAsync(TeamId);
            
            if (backlog == null)
            {
                // Team doesn't have a backlog yet - this is normal
				Logger.LogInformation("No backlog found TeamId {Id} - team may not have created a backlog yet", TeamId);
            }
        }
        catch (Exception ex)
        {
			Logger.LogError(ex, "Failed to load backlog TeamId {Id}", TeamId);
            backlog = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SetView(string view)
    {
        currentView = view;
    }

    private IEnumerable<BacklogItemSummary> GetItemsByStatus(string status)
    {
        return backlog?.Items.Where(i => i.Status == status) ?? Enumerable.Empty<BacklogItemSummary>();
    }

    private void NavigateToAddItem()
    {
		Navigation.NavigateTo($"/backlog/{TeamId}/add-item");
    }

    private void NavigateToEditItem(Guid itemId)
    {
		Navigation.NavigateTo($"/backlog/{TeamId}/items/{itemId}/edit");
    }

    private void NavigateToBacklogs()
    {
        Navigation.NavigateTo("/backlog");
    }

    private void NavigateToCreateBacklog()
    {
        Navigation.NavigateTo("/backlog/create");
    }

    private async Task DeleteItem(Guid itemId)
    {
        try
        {
			var success = await ProductBacklogService.DeleteBacklogItemAsync(TeamId, itemId);
            if (success)
            {
                NotificationService.ShowSuccess("Item deleted successfully", "Success");
                await LoadBacklog();
            }
            else
            {
                NotificationService.ShowError("Failed to delete item", "Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to delete backlog item {ItemId}", itemId);
            NotificationService.ShowError("Failed to delete item", "Error");
        }
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "To Do" => "secondary",
            "In Progress" => "warning",
            "Review" => "info",
            "Done" => "success",
            _ => "secondary"
        };
    }

    private string GetTypeBadgeColor(string type)
    {
        return type switch
        {
            "UserStory" => "primary",
            "Bug" => "danger",
            "Epic" => "success",
            "Task" => "info",
            "Spike" => "warning",
            _ => "secondary"
        };
    }

    private string GetPriorityColor(int priority)
    {
        return priority switch
        {
            <= 10 => "danger",   // High priority
            <= 50 => "warning",  // Medium priority
            _ => "success"       // Low priority
        };
    }

    private string GetItemCardClass(BacklogItemSummary item)
    {
        return item.Priority <= 10 ? "border-danger" : "";
    }

    private string GetTruncatedDescription(string description)
    {
        return description.Length > 100 ? description.Substring(0, 100) + "..." : description;
    }
}
