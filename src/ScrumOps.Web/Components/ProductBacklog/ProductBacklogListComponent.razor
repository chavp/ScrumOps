@using ScrumOps.Shared.Contracts.ProductBacklog
@using ScrumOps.Web.Services
@inject IProductBacklogService ProductBacklogService
@inject NavigationManager Navigation
@inject ILogger<ProductBacklogListComponent> Logger
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>Product Backlogs</h2>
        </div>
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="NavigateToCreate" @onclick:preventDefault="true">
                <i class="bi bi-plus-circle"></i> Create Backlog
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (backlogs?.Any() == true)
    {
        <div class="row">
            @foreach (var backlog in backlogs)
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <h5 class="card-title">@backlog.TeamName</h5>
                            <p class="card-text">Product Backlog</p>
                            <div class="row text-muted small">
                                <div class="col">
                                    <i class="bi bi-list-check"></i> @backlog.TotalItems items
                                </div>
                                <div class="col">
                                    <i class="bi bi-check-circle"></i> @backlog.CompletedItems done
                                </div>
                            </div>
                            <div class="row mt-2">
                                <div class="col">
                                    <small class="text-muted">Created: @backlog.CreatedDate.ToString("MMM dd, yyyy")</small>
                                </div>
                                <div class="col text-end">
                                    <span class="badge @(backlog.IsActive ? "bg-success" : "bg-secondary")">
                                        @(backlog.IsActive ? "Active" : "Inactive")
                                    </span>
                                </div>
                            </div>
                            @if (backlog.LastRefinedDate.HasValue)
                            {
                                <div class="row mt-1">
                                    <div class="col">
                                        <small class="text-muted">
                                            <i class="bi bi-arrow-clockwise"></i> Refined: @backlog.LastRefinedDate.Value.ToString("MMM dd, yyyy")
                                        </small>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="card-footer">
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@(() => NavigateToDetails(backlog.TeamId.Value))" @onclick:preventDefault="true">
                                    <i class="bi bi-eye"></i> View
                                </button>
								<button type="button" class="btn btn-outline-success btn-sm" @onclick="@(() => NavigateToAddItem(backlog.TeamId.Value))" @onclick:preventDefault="true">
                                    <i class="bi bi-plus"></i> Add Item
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <h4>No product backlogs found</h4>
            <p class="text-muted">Create a product backlog to start managing your user stories and requirements.</p>
            <button type="button" class="btn btn-primary" @onclick="NavigateToCreate" @onclick:preventDefault="true">
                <i class="bi bi-plus-circle"></i> Create First Backlog
            </button>
        </div>
    }
</div>

@code {
    private IEnumerable<ProductBacklogSummary>? backlogs;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5));
            await LoadBacklogs(cts.Token);
        }
        catch (OperationCanceledException)
        {
            Logger.LogWarning("LoadBacklogs operation timed out");
            isLoading = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize ProductBacklogListComponent");
            isLoading = false;
        }
    }

    private async Task LoadBacklogs(CancellationToken cancellationToken = default)
    {
        try
        {
            isLoading = true;
            var response = await ProductBacklogService.GetProductBacklogsAsync();
            backlogs = response.Backlogs;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load product backlogs");
            backlogs = new List<ProductBacklogSummary>(); // Set empty list instead of null
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/backlog/create");
    }

    private void NavigateToDetails(Guid teamId)
    {
		Navigation.NavigateTo($"/backlog/{teamId}");
    }

	private void NavigateToAddItem(Guid teamId)
    {
		Navigation.NavigateTo($"/backlog/{teamId}/add-item");
    }
}
