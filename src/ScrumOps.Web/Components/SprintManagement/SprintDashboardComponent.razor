@page "/sprints/{SprintId}"
@using ScrumOps.Shared.Contracts.Sprints
@using ScrumOps.Web.Services
@inject ISprintService SprintService
@inject NavigationManager Navigation
@inject ILogger<SprintDashboardComponent> Logger

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (sprint != null)
    {
        <div class="row mb-3">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/sprints">Sprints</a></li>
                        <li class="breadcrumb-item active">@sprint.TeamName Sprint</li>
                    </ol>
                </nav>
            </div>
        </div>

        <!-- Sprint Header -->
        <div class="row mb-4">
            <div class="col">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1>@sprint.TeamName Sprint</h1>
                        <p class="text-muted mb-1">@sprint.Goal</p>
                        <small class="text-muted">
                            <i class="bi bi-calendar3"></i> 
                            @sprint.StartDate.ToString("MMM dd, yyyy") - @sprint.EndDate.ToString("MMM dd, yyyy")
                        </small>
                    </div>
                    <div class="text-end">
                        <span class="badge @GetStatusBadgeClass(sprint.Status) fs-6 mb-2">
                            @GetStatusDisplayText(sprint.Status)
                        </span>
                        <div class="btn-group d-block">
                            @if (sprint.Status == "Planned")
                            {
                                <button class="btn btn-success btn-sm" @onclick="StartSprint">
                                    <i class="bi bi-play"></i> Start Sprint
                                </button>
                            }
                            else if (sprint.Status == "Active")
                            {
                                <button class="btn btn-warning btn-sm" @onclick="CompleteSprint">
                                    <i class="bi bi-check2-square"></i> Complete Sprint
                                </button>
                            }
                            <button class="btn btn-outline-secondary btn-sm" @onclick="NavigateToEdit">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sprint Metrics -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Capacity</h5>
                        <h2 class="text-primary">@sprint.Capacity</h2>
                        <small class="text-muted">story points</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Committed</h5>
                        <h2 class="text-warning">@sprint.CommittedStoryPoints</h2>
                        <small class="text-muted">story points</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Completed</h5>
                        <h2 class="text-success">@sprint.CompletedStoryPoints</h2>
                        <small class="text-muted">story points</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Velocity</h5>
                        <h2 class="text-info">@sprint.ActualVelocity.ToString("F1")</h2>
                        <small class="text-muted">actual points</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sprint Progress -->
        <div class="row mb-4">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Sprint Progress</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Story Points Progress</span>
                            <span>@sprint.CompletedStoryPoints / @sprint.CommittedStoryPoints</span>
                        </div>
                        <div class="progress mb-3" style="height: 20px;">
                            <div class="progress-bar bg-success" 
                                 role="progressbar" 
                                 style="width: @CalculateProgressPercentage(sprint.CompletedStoryPoints, sprint.CommittedStoryPoints)%">
                                @CalculateProgressPercentage(sprint.CompletedStoryPoints, sprint.CommittedStoryPoints).ToString("F0")%
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Tasks Progress</span>
                            <span>@sprint.Tasks.Count(t => t.Status == "Done") / @sprint.Tasks.Count()</span>
                        </div>
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar bg-info" 
                                 role="progressbar" 
                                 style="width: @CalculateProgressPercentage(sprint.Tasks.Count(t => t.Status == "Done"), sprint.Tasks.Count())%">
                                @CalculateProgressPercentage(sprint.Tasks.Count(t => t.Status == "Done"), sprint.Tasks.Count()).ToString("F0")%
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sprint Backlog -->
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Sprint Backlog</h5>
                            <button class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-plus"></i> Add Item
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (sprint.BacklogItems.Any())
                        {
                            <div class="row">
                                @foreach (var item in sprint.BacklogItems)
                                {
                                    <div class="col-md-6 col-lg-4 mb-3">
                                        <div class="card border-start border-3 @GetItemBorderClass(item.Status)">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="card-title mb-0">@item.Title</h6>
                                                    <span class="badge @GetItemStatusBadgeClass(item.Status)">
                                                        @item.Status
                                                    </span>
                                                </div>
                                                <p class="card-text small text-muted">@item.Description</p>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="bi bi-star"></i> @(item.StoryPoints?.ToString() ?? "?") pts
                                                    </small>
                                                    <small class="text-muted">
                                                        <i class="bi bi-list-check"></i> @item.Tasks.Count() tasks
                                                    </small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted text-center py-3">No items in sprint backlog</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <h4>Sprint not found</h4>
            <p class="text-muted">The requested sprint could not be found.</p>
            <button class="btn btn-primary" @onclick="NavigateToSprints">
                <i class="bi bi-arrow-left"></i> Back to Sprints
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public string SprintId { get; set; } = string.Empty;

    private SprintDetailsResponse? sprint;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSprint();
    }

    private async Task LoadSprint()
    {
        try
        {
            isLoading = true;
            sprint = await SprintService.GetSprintAsync(SprintId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load sprint {SprintId}", SprintId);
            sprint = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StartSprint()
    {
        try
        {
            var success = await SprintService.StartSprintAsync(SprintId);
            if (success)
            {
                await LoadSprint(); // Refresh the sprint data
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start sprint {SprintId}", SprintId);
        }
    }

    private async Task CompleteSprint()
    {
        try
        {
            var success = await SprintService.CompleteSprintAsync(SprintId);
            if (success)
            {
                await LoadSprint(); // Refresh the sprint data
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to complete sprint {SprintId}", SprintId);
        }
    }

    private void NavigateToEdit()
    {
        Navigation.NavigateTo($"/sprints/{SprintId}/edit");
    }

    private void NavigateToSprints()
    {
        Navigation.NavigateTo("/sprints");
    }

    private static double CalculateProgressPercentage(int completed, int total)
    {
        return total > 0 ? (completed * 100.0 / total) : 0;
    }

    private static string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success",
            "Completed" => "bg-info",
            "Planned" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private static string GetStatusDisplayText(string status)
    {
        return status switch
        {
            "Active" => "In Progress",
            "Completed" => "Completed",
            "Planned" => "Planned",
            _ => status
        };
    }

    private static string GetItemBorderClass(string status)
    {
        return status switch
        {
            "Done" => "border-success",
            "InProgress" => "border-warning",
            "Todo" => "border-primary",
            _ => "border-secondary"
        };
    }

    private static string GetItemStatusBadgeClass(string status)
    {
        return status switch
        {
            "Done" => "bg-success",
            "InProgress" => "bg-warning",
            "Todo" => "bg-primary",
            _ => "bg-secondary"
        };
    }
}