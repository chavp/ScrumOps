@page "/teams/{TeamId:guid}/sprints/{SprintId:guid}"
@using ScrumOps.Shared.Contracts.Sprints
@using ScrumOps.Web.Services
@inject ISprintService SprintService
@inject INotificationService NotificationService
@inject NavigationManager Navigation
@inject ILogger<SprintDashboardComponent> Logger
@rendermode InteractiveServer

<div class="container-fluid">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (sprint != null)
    {
        <div class="row mb-3">
            <div class="col">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/sprints">Sprints</a></li>
                        <li class="breadcrumb-item"><a href="/teams/@TeamId/sprints">@sprint.TeamName</a></li>
                        <li class="breadcrumb-item active">Sprint Details</li>
                    </ol>
                </nav>
            </div>
        </div>

        <!-- Sprint Header -->
        <div class="row mb-4">
            <div class="col">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h1>@sprint.TeamName Sprint</h1>
                        <p class="text-muted mb-1">@sprint.Goal</p>
                        <small class="text-muted">
                            <i class="bi bi-calendar3"></i> 
                            @sprint.StartDate.ToString("MMM dd, yyyy") - @sprint.EndDate.ToString("MMM dd, yyyy")
                        </small>
                    </div>
                    <div class="text-end">
                        <span class="badge @GetStatusBadgeClass(sprint.Status) fs-6 mb-2">
                            @GetStatusDisplayText(sprint.Status)
                        </span>
                        <div class="btn-group d-block">
                            @if (sprint.Status == "Planned")
                            {
                                <button class="btn btn-success btn-sm me-1" @onclick="StartSprint">
                                    <i class="bi bi-play"></i> Start Sprint
                                </button>
                                <button class="btn btn-outline-primary btn-sm me-1" @onclick="NavigateToPlanning">
                                    <i class="bi bi-list-task"></i> Planning
                                </button>
                            }
                            else if (sprint.Status == "Active")
                            {
                                <button class="btn btn-warning btn-sm me-1" @onclick="CompleteSprint">
                                    <i class="bi bi-check2-square"></i> Complete Sprint
                                </button>
                                <button class="btn btn-outline-info btn-sm me-1" @onclick="NavigateToBoard">
                                    <i class="bi bi-kanban"></i> Board
                                </button>
                            }
                            else if (sprint.Status == "Completed")
                            {
                                <button class="btn btn-outline-success btn-sm me-1" @onclick="NavigateToRetrospective">
                                    <i class="bi bi-chat-quote"></i> Retrospective
                                </button>
                                <button class="btn btn-outline-info btn-sm me-1" @onclick="NavigateToReports">
                                    <i class="bi bi-graph-up"></i> Reports
                                </button>
                                <span class="badge bg-success ms-2">
                                    <i class="bi bi-check-circle"></i> Sprint Completed
                                </span>
                            }
                            <button class="btn btn-outline-secondary btn-sm me-1" @onclick="NavigateToEdit">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <div class="btn-group ms-1" role="group">
                                <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown">
                                    <i class="bi bi-three-dots"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><button class="dropdown-item" @onclick="NavigateToBoard"><i class="bi bi-kanban"></i> Sprint Board</button></li>
                                    <li><button class="dropdown-item" @onclick="NavigateToBurndown"><i class="bi bi-graph-down"></i> Burndown Chart</button></li>
                                    <li><button class="dropdown-item" @onclick="NavigateToReports"><i class="bi bi-graph-up"></i> Reports</button></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><button class="dropdown-item" @onclick="NavigateToPlanning"><i class="bi bi-list-task"></i> Sprint Planning</button></li>
                                    <li><button class="dropdown-item" @onclick="NavigateToRetrospective"><i class="bi bi-chat-quote"></i> Retrospective</button></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sprint Metrics -->
        <div class="row mb-4">
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Capacity</h5>
                        <h2 class="text-primary">@sprint.Capacity</h2>
                        <small class="text-muted">story points</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Committed</h5>
                        <h2 class="text-warning">@sprint.CommittedStoryPoints</h2>
                        <small class="text-muted">story points</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Completed</h5>
                        <h2 class="text-success">@sprint.CompletedStoryPoints</h2>
                        <small class="text-muted">story points</small>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card text-center">
                    <div class="card-body">
                        <h5 class="card-title">Velocity</h5>
                        <h2 class="text-info">@sprint.ActualVelocity.ToString("F1")</h2>
                        <small class="text-muted">actual points</small>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sprint Progress -->
        <div class="row mb-4">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Sprint Progress</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Story Points Progress</span>
                            <span>@sprint.CompletedStoryPoints / @sprint.CommittedStoryPoints</span>
                        </div>
                        <div class="progress mb-3" style="height: 20px;">
                            <div class="progress-bar @GetProgressBarClass()" 
                                 role="progressbar" 
                                 style="width: @CalculateProgressPercentage(sprint.CompletedStoryPoints, sprint.CommittedStoryPoints)%">
                                @CalculateProgressPercentage(sprint.CompletedStoryPoints, sprint.CommittedStoryPoints).ToString("F0")%
                            </div>
                        </div>
                        
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span>Tasks Progress</span>
                            <span>@sprint.Tasks.Count(t => t.Status == "Done") / @sprint.Tasks.Count()</span>
                        </div>
                        <div class="progress" style="height: 20px;">
                            <div class="progress-bar @GetTaskProgressBarClass()" 
                                 role="progressbar" 
                                 style="width: @CalculateProgressPercentage(sprint.Tasks.Count(t => t.Status == "Done"), sprint.Tasks.Count())%">
                                @CalculateProgressPercentage(sprint.Tasks.Count(t => t.Status == "Done"), sprint.Tasks.Count()).ToString("F0")%
                            </div>
                        </div>

                        @if (sprint.Status == "Completed")
                        {
                            <div class="mt-3 p-3 bg-success bg-opacity-10 border border-success rounded">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-check-circle-fill text-success me-2"></i>
                                    <div>
                                        <strong class="text-success">Sprint Completed Successfully!</strong>
                                        <br />
                                        <small class="text-muted">
                                            Final Velocity: @sprint.ActualVelocity.ToString("F1") story points
                                            | Completion Rate: @CalculateCompletionRate()%
                                        </small>
                                    </div>
                                </div>
                            </div>
                        }
                        else if (sprint.Status == "Active")
                        {
                            var daysRemaining = CalculateDaysRemaining();
                            var progressRate = CalculateProgressPercentage(sprint.CompletedStoryPoints, sprint.CommittedStoryPoints);
                            <div class="mt-3 p-3 @GetSprintHealthClass(progressRate, daysRemaining) rounded">
                                <div class="d-flex align-items-center">
                                    <i class="bi @GetSprintHealthIcon(progressRate, daysRemaining) me-2"></i>
                                    <div>
                                        <strong>Sprint Health: @GetSprintHealthText(progressRate, daysRemaining)</strong>
                                        <br />
                                        <small class="text-muted">@daysRemaining days remaining</small>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Sprint Backlog -->
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Sprint Backlog</h5>
                            <button class="btn btn-outline-primary btn-sm">
                                <i class="bi bi-plus"></i> Add Item
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (sprint.BacklogItems.Any())
                        {
                            <div class="row">
                                @foreach (var item in sprint.BacklogItems)
                                {
                                    <div class="col-md-6 col-lg-4 mb-3">
                                        <div class="card border-start border-3 @GetItemBorderClass(item.Status)">
                                            <div class="card-body">
                                                <div class="d-flex justify-content-between align-items-start mb-2">
                                                    <h6 class="card-title mb-0">@item.Title</h6>
                                                    <span class="badge @GetItemStatusBadgeClass(item.Status)">
                                                        @item.Status
                                                    </span>
                                                </div>
                                                <p class="card-text small text-muted">@item.Description</p>
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <small class="text-muted">
                                                        <i class="bi bi-star"></i> @(item.StoryPoints?.ToString() ?? "?") pts
                                                    </small>
                                                    <small class="text-muted">
                                                        <i class="bi bi-list-check"></i> @item.Tasks.Count() tasks
                                                    </small>
                                                </div>

                                                @if (item.Tasks.Any())
                                                {
                                                    <div class="mt-2">
                                                        <small class="text-muted d-block mb-1">Tasks:</small>
                                                        @foreach (var task in item.Tasks.Take(3))
                                                        {
                                                            <span class="badge badge-sm @GetTaskStatusBadgeClass(task.Status) me-1 mb-1">
                                                                @task.Title
                                                            </span>
                                                        }
                                                        @if (item.Tasks.Count() > 3)
                                                        {
                                                            <span class="badge bg-light text-dark">+@(item.Tasks.Count() - 3) more</span>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted text-center py-3">No items in sprint backlog</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <h4>Sprint not found</h4>
            <p class="text-muted">The requested sprint could not be found.</p>
            <button class="btn btn-primary" @onclick="NavigateToSprints">
                <i class="bi bi-arrow-left"></i> Back to Sprints
            </button>
        </div>
    }
</div>

@code {
    [Parameter] public Guid TeamId { get; set; }
    [Parameter] public Guid SprintId { get; set; }

    private SprintDetailsResponse? sprint;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadSprint();
    }

    private async Task LoadSprint()
    {
        try
        {
            isLoading = true;
            sprint = await SprintService.GetSprintAsync(TeamId, SprintId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load sprint {SprintId} for team {TeamId}", SprintId, TeamId);
            sprint = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StartSprint()
    {
        try
        {
            var success = await SprintService.StartSprintAsync(TeamId, SprintId);
            if (success)
            {
                NotificationService.ShowSuccess("Sprint started successfully!", "Success");
                await LoadSprint(); // Refresh the sprint data
            }
            else
            {
                NotificationService.ShowError("Failed to start sprint", "Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start sprint {SprintId} for team {TeamId}", SprintId, TeamId);
            NotificationService.ShowError("Failed to start sprint", "Error");
        }
    }

    private async Task CompleteSprint()
    {
        try
        {
            var success = await SprintService.CompleteSprintAsync(TeamId, SprintId);
            if (success)
            {
                NotificationService.ShowSuccess("Sprint completed successfully!", "Success");
                await LoadSprint(); // Refresh the sprint data
            }
            else
            {
                NotificationService.ShowError("Failed to complete sprint", "Error");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to complete sprint {SprintId} for team {TeamId}", SprintId, TeamId);
            NotificationService.ShowError("Failed to complete sprint", "Error");
        }
    }

    private void NavigateToEdit()
    {
        Navigation.NavigateTo($"/teams/{TeamId}/sprints/{SprintId}/edit");
    }

    private void NavigateToBoard()
    {
        Navigation.NavigateTo($"/teams/{TeamId}/sprints/{SprintId}/board");
    }

    private void NavigateToBurndown()
    {
        Navigation.NavigateTo($"/teams/{TeamId}/sprints/{SprintId}/burndown");
    }

    private void NavigateToPlanning()
    {
        Navigation.NavigateTo($"/teams/{TeamId}/sprints/{SprintId}/planning");
    }

    private void NavigateToRetrospective()
    {
        Navigation.NavigateTo($"/teams/{TeamId}/sprints/{SprintId}/retrospective");
    }

    private void NavigateToReports()
    {
        Navigation.NavigateTo($"/teams/{TeamId}/sprints/{SprintId}/reports");
    }

    private void NavigateToSprints()
    {
        Navigation.NavigateTo("/sprints");
    }

    private static double CalculateProgressPercentage(int completed, int total)
    {
        return total > 0 ? (completed * 100.0 / total) : 0;
    }

    private int CalculateCompletionRate()
    {
        if (sprint == null || sprint.CommittedStoryPoints == 0) return 0;
        return (int)((double)sprint.CompletedStoryPoints / sprint.CommittedStoryPoints * 100);
    }

    private int CalculateDaysRemaining()
    {
        if (sprint == null) return 0;
        var remaining = (sprint.EndDate - DateTime.Today).Days;
        return Math.Max(0, remaining);
    }

    private string GetProgressBarClass()
    {
        if (sprint == null) return "bg-secondary";
        var progressRate = CalculateProgressPercentage(sprint.CompletedStoryPoints, sprint.CommittedStoryPoints);
        
        return sprint.Status switch
        {
            "Completed" => "bg-success",
            "Active" when progressRate >= 80 => "bg-success",
            "Active" when progressRate >= 50 => "bg-info", 
            "Active" when progressRate >= 25 => "bg-warning",
            "Active" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetTaskProgressBarClass()
    {
        if (sprint == null || !sprint.Tasks.Any()) return "bg-secondary";
        var progressRate = CalculateProgressPercentage(sprint.Tasks.Count(t => t.Status == "Done"), sprint.Tasks.Count());
        
        return sprint.Status switch
        {
            "Completed" => "bg-success",
            "Active" when progressRate >= 90 => "bg-success",
            "Active" when progressRate >= 70 => "bg-info",
            "Active" when progressRate >= 40 => "bg-warning",
            "Active" => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetSprintHealthClass(double progressRate, int daysRemaining)
    {
        var totalDays = (sprint?.EndDate - sprint?.StartDate)?.Days ?? 14;
        var expectedProgress = totalDays > 0 ? (totalDays - daysRemaining) * 100.0 / totalDays : 0;
        
        if (progressRate >= expectedProgress * 1.1) return "bg-success bg-opacity-10 border border-success";
        if (progressRate >= expectedProgress * 0.8) return "bg-info bg-opacity-10 border border-info";
        return "bg-warning bg-opacity-10 border border-warning";
    }

    private string GetSprintHealthIcon(double progressRate, int daysRemaining)
    {
        var totalDays = (sprint?.EndDate - sprint?.StartDate)?.Days ?? 14;
        var expectedProgress = totalDays > 0 ? (totalDays - daysRemaining) * 100.0 / totalDays : 0;
        
        if (progressRate >= expectedProgress * 1.1) return "bi-check-circle-fill text-success";
        if (progressRate >= expectedProgress * 0.8) return "bi-info-circle-fill text-info";
        return "bi-exclamation-triangle-fill text-warning";
    }

    private string GetSprintHealthText(double progressRate, int daysRemaining)
    {
        var totalDays = (sprint?.EndDate - sprint?.StartDate)?.Days ?? 14;
        var expectedProgress = totalDays > 0 ? (totalDays - daysRemaining) * 100.0 / totalDays : 0;
        
        if (progressRate >= expectedProgress * 1.1) return "Ahead of Schedule";
        if (progressRate >= expectedProgress * 0.8) return "On Track";
        return "Behind Schedule";
    }

    private static string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Active" => "bg-success",
            "Completed" => "bg-info",
            "Planned" => "bg-warning",
            _ => "bg-secondary"
        };
    }

    private static string GetStatusDisplayText(string status)
    {
        return status switch
        {
            "Active" => "In Progress",
            "Completed" => "Completed",
            "Planned" => "Planned",
            _ => status
        };
    }

    private static string GetItemBorderClass(string status)
    {
        return status switch
        {
            "Done" => "border-success",
            "InProgress" => "border-warning",
            "Todo" => "border-primary",
            _ => "border-secondary"
        };
    }

    private static string GetItemStatusBadgeClass(string status)
    {
        return status switch
        {
            "Done" => "bg-success",
            "InProgress" => "bg-warning",
            "Todo" => "bg-primary",
            _ => "bg-secondary"
        };
    }

    private static string GetTaskStatusBadgeClass(string status)
    {
        return status switch
        {
            "Done" => "bg-success text-white",
            "InProgress" => "bg-warning text-dark",
            "Todo" => "bg-primary text-white",
            _ => "bg-secondary text-white"
        };
    }
}