// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScrumOps.Infrastructure.Persistence;

#nullable disable

namespace ScrumOps.Infrastructure.Migrations
{
    [DbContext(typeof(ScrumOpsDbContext))]
    [Migration("20251001102459_initDb2")]
    partial class initDb2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScrumOps.Domain.ProductBacklog.Entities.ProductBacklog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastRefinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_ProductBacklogs_CreatedDate");

                    b.HasIndex("LastRefinedDate")
                        .HasDatabaseName("IX_ProductBacklogs_LastRefinedDate");

                    b.HasIndex("TeamId")
                        .IsUnique()
                        .HasDatabaseName("IX_ProductBacklogs_TeamId");

                    b.ToTable("ProductBacklogs", "ProductBacklog");
                });

            modelBuilder.Entity("ScrumOps.Domain.ProductBacklog.Entities.ProductBacklogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductBacklogId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_ProductBacklogItems_CreatedDate");

                    b.HasIndex("ProductBacklogId")
                        .HasDatabaseName("IX_ProductBacklogItems_ProductBacklogId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_ProductBacklogItems_Status");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_ProductBacklogItems_Type");

                    b.ToTable("ProductBacklogItems", "ProductBacklog");
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.Sprint", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Sprints_CreatedDate");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("IX_Sprints_EndDate");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_Sprints_StartDate");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Sprints_Status");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_Sprints_TeamId");

                    b.HasIndex("TeamId", "Status")
                        .HasDatabaseName("IX_Sprints_TeamId_Status");

                    b.ToTable("Sprints", "SprintManagement");
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.SprintBacklogItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AddedToSprintDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OriginalEstimate")
                        .HasColumnType("integer");

                    b.Property<Guid>("ProductBacklogItemId")
                        .HasColumnType("uuid");

                    b.Property<int>("RemainingWork")
                        .HasColumnType("integer");

                    b.Property<Guid>("SprintId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompletedDate")
                        .HasDatabaseName("IX_SprintBacklogItems_CompletedDate");

                    b.HasIndex("ProductBacklogItemId")
                        .IsUnique()
                        .HasDatabaseName("IX_SprintBacklogItems_ProductBacklogItemId");

                    b.HasIndex("SprintId")
                        .HasDatabaseName("IX_SprintBacklogItems_SprintId");

                    b.HasIndex("SprintId", "CompletedDate")
                        .HasDatabaseName("IX_SprintBacklogItems_SprintId_CompletedDate");

                    b.ToTable("SprintBacklogItems", "SprintManagement");
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OriginalEstimateHours")
                        .HasColumnType("integer");

                    b.Property<int>("RemainingHours")
                        .HasColumnType("integer");

                    b.Property<Guid>("SprintBacklogItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Tasks_CreatedDate");

                    b.HasIndex("SprintBacklogItemId")
                        .HasDatabaseName("IX_Tasks_SprintBacklogItemId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Tasks_Status");

                    b.ToTable("Tasks", "SprintManagement");
                });

            modelBuilder.Entity("ScrumOps.Domain.TeamManagement.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate")
                        .HasDatabaseName("IX_Teams_CreatedDate");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Teams_IsActive");

                    b.ToTable("Teams", "TeamManagement");
                });

            modelBuilder.Entity("ScrumOps.Domain.TeamManagement.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("IX_Users_TeamId");

                    b.ToTable("Users", "TeamManagement");
                });

            modelBuilder.Entity("ScrumOps.Domain.ProductBacklog.Entities.ProductBacklog", b =>
                {
                    b.OwnsOne("ScrumOps.Domain.ProductBacklog.ValueObjects.BacklogNotes", "Notes", b1 =>
                        {
                            b1.Property<Guid>("ProductBacklogId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("character varying(5000)")
                                .HasColumnName("Notes");

                            b1.HasKey("ProductBacklogId");

                            b1.ToTable("ProductBacklogs", "ProductBacklog");

                            b1.WithOwner()
                                .HasForeignKey("ProductBacklogId");
                        });

                    b.Navigation("Notes")
                        .IsRequired();
                });

            modelBuilder.Entity("ScrumOps.Domain.ProductBacklog.Entities.ProductBacklogItem", b =>
                {
                    b.HasOne("ScrumOps.Domain.ProductBacklog.Entities.ProductBacklog", null)
                        .WithMany("Items")
                        .HasForeignKey("ProductBacklogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ScrumOps.Domain.ProductBacklog.ValueObjects.AcceptanceCriteria", "AcceptanceCriteria", b1 =>
                        {
                            b1.Property<Guid>("ProductBacklogItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(5000)
                                .HasColumnType("character varying(5000)")
                                .HasColumnName("AcceptanceCriteria");

                            b1.HasKey("ProductBacklogItemId");

                            b1.ToTable("ProductBacklogItems", "ProductBacklog");

                            b1.WithOwner()
                                .HasForeignKey("ProductBacklogItemId");
                        });

                    b.OwnsOne("ScrumOps.Domain.ProductBacklog.ValueObjects.ItemDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("ProductBacklogItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("Description");

                            b1.HasKey("ProductBacklogItemId");

                            b1.ToTable("ProductBacklogItems", "ProductBacklog");

                            b1.WithOwner()
                                .HasForeignKey("ProductBacklogItemId");
                        });

                    b.OwnsOne("ScrumOps.Domain.ProductBacklog.ValueObjects.ItemTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("ProductBacklogItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Title");

                            b1.HasKey("ProductBacklogItemId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_ProductBacklogItems_Title");

                            b1.ToTable("ProductBacklogItems", "ProductBacklog");

                            b1.WithOwner()
                                .HasForeignKey("ProductBacklogItemId");
                        });

                    b.OwnsOne("ScrumOps.Domain.ProductBacklog.ValueObjects.Priority", "Priority", b1 =>
                        {
                            b1.Property<Guid>("ProductBacklogItemId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Priority");

                            b1.HasKey("ProductBacklogItemId");

                            b1.HasIndex("Value")
                                .HasDatabaseName("IX_ProductBacklogItems_Priority");

                            b1.ToTable("ProductBacklogItems", "ProductBacklog");

                            b1.WithOwner()
                                .HasForeignKey("ProductBacklogItemId");
                        });

                    b.OwnsOne("ScrumOps.Domain.ProductBacklog.ValueObjects.StoryPoints", "StoryPoints", b1 =>
                        {
                            b1.Property<Guid>("ProductBacklogItemId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("StoryPoints");

                            b1.HasKey("ProductBacklogItemId");

                            b1.ToTable("ProductBacklogItems", "ProductBacklog");

                            b1.WithOwner()
                                .HasForeignKey("ProductBacklogItemId");
                        });

                    b.OwnsOne("ScrumOps.Domain.ProductBacklog.ValueObjects.UserName", "CreatedBy", b1 =>
                        {
                            b1.Property<Guid>("ProductBacklogItemId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("CreatedBy");

                            b1.HasKey("ProductBacklogItemId");

                            b1.ToTable("ProductBacklogItems", "ProductBacklog");

                            b1.WithOwner()
                                .HasForeignKey("ProductBacklogItemId");
                        });

                    b.Navigation("AcceptanceCriteria");

                    b.Navigation("CreatedBy")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Priority")
                        .IsRequired();

                    b.Navigation("StoryPoints");

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.Sprint", b =>
                {
                    b.OwnsOne("ScrumOps.Domain.SprintManagement.ValueObjects.Capacity", "Capacity", b1 =>
                        {
                            b1.Property<Guid>("SprintId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Hours")
                                .HasColumnType("integer")
                                .HasColumnName("CapacityHours");

                            b1.HasKey("SprintId");

                            b1.ToTable("Sprints", "SprintManagement");

                            b1.WithOwner()
                                .HasForeignKey("SprintId");
                        });

                    b.OwnsOne("ScrumOps.Domain.SprintManagement.ValueObjects.SprintGoal", "Goal", b1 =>
                        {
                            b1.Property<Guid>("SprintId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("Goal");

                            b1.HasKey("SprintId");

                            b1.ToTable("Sprints", "SprintManagement");

                            b1.WithOwner()
                                .HasForeignKey("SprintId");
                        });

                    b.OwnsOne("ScrumOps.Domain.SprintManagement.ValueObjects.Velocity", "ActualVelocity", b1 =>
                        {
                            b1.Property<Guid>("SprintId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("ActualVelocity");

                            b1.HasKey("SprintId");

                            b1.ToTable("Sprints", "SprintManagement");

                            b1.WithOwner()
                                .HasForeignKey("SprintId");
                        });

                    b.Navigation("ActualVelocity");

                    b.Navigation("Capacity")
                        .IsRequired();

                    b.Navigation("Goal")
                        .IsRequired();
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.SprintBacklogItem", b =>
                {
                    b.HasOne("ScrumOps.Domain.SprintManagement.Entities.Sprint", null)
                        .WithMany("BacklogItems")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ScrumOps.Domain.SprintManagement.ValueObjects.StoryPoints", "StoryPoints", b1 =>
                        {
                            b1.Property<Guid>("SprintBacklogItemId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("StoryPoints");

                            b1.HasKey("SprintBacklogItemId");

                            b1.ToTable("SprintBacklogItems", "SprintManagement");

                            b1.WithOwner()
                                .HasForeignKey("SprintBacklogItemId");
                        });

                    b.Navigation("StoryPoints")
                        .IsRequired();
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.Task", b =>
                {
                    b.HasOne("ScrumOps.Domain.SprintManagement.Entities.SprintBacklogItem", null)
                        .WithMany("Tasks")
                        .HasForeignKey("SprintBacklogItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ScrumOps.Domain.SprintManagement.ValueObjects.TaskDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("Description");

                            b1.HasKey("TaskId");

                            b1.ToTable("Tasks", "SprintManagement");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });

                    b.OwnsOne("ScrumOps.Domain.SprintManagement.ValueObjects.TaskTitle", "Title", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Title");

                            b1.HasKey("TaskId");

                            b1.ToTable("Tasks", "SprintManagement");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("ScrumOps.Domain.TeamManagement.Entities.Team", b =>
                {
                    b.OwnsOne("ScrumOps.Domain.TeamManagement.ValueObjects.SprintLength", "SprintLength", b1 =>
                        {
                            b1.Property<Guid>("TeamId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Weeks")
                                .HasColumnType("integer")
                                .HasColumnName("SprintLengthWeeks");

                            b1.HasKey("TeamId");

                            b1.ToTable("Teams", "TeamManagement");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.OwnsOne("ScrumOps.Domain.TeamManagement.ValueObjects.TeamDescription", "Description", b1 =>
                        {
                            b1.Property<Guid>("TeamId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("Description");

                            b1.HasKey("TeamId");

                            b1.ToTable("Teams", "TeamManagement");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.OwnsOne("ScrumOps.Domain.TeamManagement.ValueObjects.TeamName", "Name", b1 =>
                        {
                            b1.Property<Guid>("TeamId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Name");

                            b1.HasKey("TeamId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Teams_Name");

                            b1.ToTable("Teams", "TeamManagement");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.OwnsOne("ScrumOps.Domain.TeamManagement.ValueObjects.Velocity", "CurrentVelocity", b1 =>
                        {
                            b1.Property<Guid>("TeamId")
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("numeric")
                                .HasDefaultValue(0m)
                                .HasColumnName("CurrentVelocityValue");

                            b1.HasKey("TeamId");

                            b1.ToTable("Teams", "TeamManagement");

                            b1.WithOwner()
                                .HasForeignKey("TeamId");
                        });

                    b.Navigation("CurrentVelocity")
                        .IsRequired();

                    b.Navigation("Description")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("SprintLength")
                        .IsRequired();
                });

            modelBuilder.Entity("ScrumOps.Domain.TeamManagement.Entities.User", b =>
                {
                    b.HasOne("ScrumOps.Domain.TeamManagement.Entities.Team", null)
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ScrumOps.Domain.SharedKernel.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(320)
                                .HasColumnType("character varying(320)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.HasIndex("Value")
                                .IsUnique()
                                .HasDatabaseName("IX_Users_Email");

                            b1.ToTable("Users", "TeamManagement");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("ScrumOps.Domain.TeamManagement.ValueObjects.ScrumRole", "Role", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsSingleton")
                                .HasColumnType("boolean")
                                .HasColumnName("RoleIsSingleton");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("Role");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "TeamManagement");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("ScrumOps.Domain.TeamManagement.ValueObjects.UserName", "Name", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Name");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "TeamManagement");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Role")
                        .IsRequired();
                });

            modelBuilder.Entity("ScrumOps.Domain.ProductBacklog.Entities.ProductBacklog", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.Sprint", b =>
                {
                    b.Navigation("BacklogItems");
                });

            modelBuilder.Entity("ScrumOps.Domain.SprintManagement.Entities.SprintBacklogItem", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ScrumOps.Domain.TeamManagement.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });
#pragma warning restore 612, 618
        }
    }
}
